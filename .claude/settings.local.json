{
  "permissions": {
    "allow": [
      "Bash(node:*)",
      "Bash(timeout:*)",
      "Bash(git fetch:*)",
      "Bash(git pull:*)",
      "Bash(taskkill:*)",
      "Bash(python:*)",
      "Bash(py app.py)",
      "Bash(mv:*)",
      "WebFetch(domain:localhost)",
      "Bash(pip install:*)",
      "Bash(mkdir:*)",
      "Bash(py:*)",
      "Bash(del test_pdf.py)",
      "Bash(rm:*)",
      "Bash(copy \"PRESCRIÇÃO - HIPERTENSÃO - MODELO.docx\" \"template_receituario.docx\")",
      "Bash(cp:*)",
      "Bash(psql:*)",
      "Bash(curl:*)",
      "Bash(del check_table.py)",
      "Bash(where python)",
      "Bash(envScriptsactivate)",
      "Bash(envScriptspython.exe app.py)",
      "Bash(\"env/Scripts/python.exe\" app.py)",
      "Bash(C:UsersPichauDesktopSISTEMA APSsistemaAPSenvScriptspython.exe app.py)",
      "Bash(C:UsersPichauDesktopSISTEMA APSsistemaAPSenvScriptspython.exe -c \"\nimport psycopg2\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    cur = conn.cursor()\n    \n    # Verificar se há medicamentos na tabela\n    cur.execute(''SELECT COUNT(*) FROM sistemaaps.tb_hiperdia_has_medicamentos WHERE data_fim IS NULL OR data_fim > CURRENT_DATE'')\n    count = cur.fetchone()[0]\n    print(f''Total de medicamentos ativos: {count}'')\n    \n    # Mostrar alguns exemplos se houver dados\n    if count > 0:\n        cur.execute(''''''\n            SELECT codcidadao, nome_medicamento, dose, frequencia, data_inicio, data_fim \n            FROM sistemaaps.tb_hiperdia_has_medicamentos \n            WHERE data_fim IS NULL OR data_fim > CURRENT_DATE\n            LIMIT 5\n        '''''')\n        rows = cur.fetchall()\n        print(''\\nExemplos de medicamentos ativos:'')\n        for row in rows:\n            print(f''Paciente: {row[0]}, Medicamento: {row[1]}, Dose: {row[2]}, Frequência: {row[3]}, Início: {row[4]}, Fim: {row[5]}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro: {e}'')\n\")",
      "Bash(.envScriptspython.exe app.py)",
      "Bash(npx eslint:*)",
      "Bash(where psql)",
      "Bash(sed:*)",
      "Bash(C:UsersPichauDesktopSISTEMA APSsistemaAPSenvScriptspython.exe -c \"\nimport psycopg2\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    cur = conn.cursor()\n    \n    # Verificar estrutura da tabela de acompanhamento\n    cur.execute(''''''\n        SELECT column_name, data_type, is_nullable, column_default\n        FROM information_schema.columns \n        WHERE table_name = ''tb_hiperdia_has_acompanhamento''\n        AND table_schema = ''sistemaaps''\n        ORDER BY ordinal_position\n    '''''')\n    \n    columns = cur.fetchall()\n    print(''Estrutura atual da tabela tb_hiperdia_has_acompanhamento:'')\n    print(''Column Name | Data Type | Nullable | Default'')\n    print(''-'' * 60)\n    for col in columns:\n        print(f''{col[0]} | {col[1]} | {col[2]} | {col[3]}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro: {e}'')\n\")",
      "Bash(\"C:\\Users\\Pichau\\Desktop\\SISTEMA APS\\sistemaAPS\\env\\Scripts\\python.exe\" -c \"\nimport psycopg2\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    cur = conn.cursor()\n    \n    # Verificar estrutura da tabela de acompanhamento\n    cur.execute(''''''\n        SELECT column_name, data_type, is_nullable, column_default\n        FROM information_schema.columns \n        WHERE table_name = ''tb_hiperdia_has_acompanhamento''\n        AND table_schema = ''sistemaaps''\n        ORDER BY ordinal_position\n    '''''')\n    \n    columns = cur.fetchall()\n    print(''Estrutura atual da tabela tb_hiperdia_has_acompanhamento:'')\n    print(''Column Name | Data Type | Nullable | Default'')\n    print(''-'' * 60)\n    for col in columns:\n        print(f''{col[0]} | {col[1]} | {col[2]} | {col[3]}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro: {e}'')\n\")",
      "Bash(find . -name \"*.sql\" -exec grep -l \"mv_hiperdia\" {} ;)",
      "Bash(\"C:\\Users\\Pichau\\Desktop\\SISTEMA APS\\sistemaAPS\\env\\Scripts\\python.exe\" -c \"\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    # Ler o script SQL para criar a view de diabetes\n    with open(''bd_sistema_aps/Scripts/Hiperdia/Diabetes/CREATE VIEW HIPERDIA - DIABETES.sql'', ''r'', encoding=''utf-8'') as f:\n        sql_script = f.read()\n    \n    cur = conn.cursor()\n    \n    # Executar o script completo\n    cur.execute(sql_script)\n    conn.commit()\n    \n    print(''View mv_hiperdia_diabetes criada com sucesso!'')\n    \n    # Verificar se a view foi criada e testar uma consulta\n    cur.execute(''SELECT COUNT(*) FROM sistemaaps.mv_hiperdia_diabetes'')\n    count = cur.fetchone()[0]\n    print(f''Total de pacientes diabeticos encontrados: {count}'')\n    \n    # Mostrar alguns exemplos\n    if count > 0:\n        cur.execute(''SELECT cod_paciente, nome_paciente, tipo_diabetes, nome_equipe FROM sistemaaps.mv_hiperdia_diabetes LIMIT 5'')\n        rows = cur.fetchall()\n        print(''\\nExemplos de pacientes diabeticos:'')\n        for row in rows:\n            print(f''ID: {row[0]}, Nome: {row[1]}, Tipo: {row[2]}, Equipe: {row[3]}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro ao criar view: {e}'')\n\")",
      "Bash(\"env\\Scripts\\python.exe\":*)",
      "Bash(find:*)",
      "Bash(\"C:\\Users\\Pichau\\Desktop\\SISTEMA APS\\sistemaAPS\\env\\Scripts\\python.exe\" -c \"\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    # Read and execute the insulin table script\n    with open(''bd_sistema_aps/Scripts/Hiperdia/Diabetes/CREATE_TB_HIPERDIA_DM_INSULINA.sql'', ''r'', encoding=''utf-8'') as f:\n        sql_script = f.read()\n    \n    cur = conn.cursor()\n    \n    # Execute the complete script\n    cur.execute(sql_script)\n    conn.commit()\n    \n    print(''Tabela tb_hiperdia_dm_insulina criada com sucesso!'')\n    \n    # Verify the table was created and test a query\n    cur.execute(''SELECT COUNT(*) FROM sistemaaps.tb_hiperdia_dm_insulina'')\n    count = cur.fetchone()[0]\n    print(f''Total de registros de insulina: {count}'')\n    \n    # Show some examples if there are records\n    if count > 0:\n        cur.execute(''SELECT cod_seq_insulina, codcidadao, tipo_insulina, frequencia_dia, doses_estruturadas FROM sistemaaps.tb_hiperdia_dm_insulina LIMIT 3'')\n        rows = cur.fetchall()\n        print(''\\nExemplos de insulinas cadastradas:'')\n        for row in rows:\n            print(f''ID: {row[0]}, Paciente: {row[1]}, Tipo: {row[2]}, Freq: {row[3]}x/dia, Doses: {row[4]}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro ao criar tabela de insulina: {e}'')\n\")",
      "Bash(\"C:\\Users\\Pichau\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    # Read and execute the insulin table script\n    with open(''bd_sistema_aps/Scripts/Hiperdia/Diabetes/CREATE_TB_HIPERDIA_DM_INSULINA.sql'', ''r'', encoding=''utf-8'') as f:\n        sql_script = f.read()\n    \n    cur = conn.cursor()\n    \n    # Execute the complete script\n    cur.execute(sql_script)\n    conn.commit()\n    \n    print(''Tabela tb_hiperdia_dm_insulina criada com sucesso!'')\n    \n    # Verify the table was created and test a query\n    cur.execute(''SELECT COUNT(*) FROM sistemaaps.tb_hiperdia_dm_insulina'')\n    count = cur.fetchone()[0]\n    print(f''Total de registros de insulina: {count}'')\n    \n    # Show some examples if there are records\n    if count > 0:\n        cur.execute(''SELECT cod_seq_insulina, codcidadao, tipo_insulina, frequencia_dia, doses_estruturadas FROM sistemaaps.tb_hiperdia_dm_insulina LIMIT 3'')\n        rows = cur.fetchall()\n        print(''\\nExemplos de insulinas cadastradas:'')\n        for row in rows:\n            print(f''ID: {row[0]}, Paciente: {row[1]}, Tipo: {row[2]}, Freq: {row[3]}x/dia, Doses: {row[4]}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro ao criar tabela de insulina: {e}'')\n\")",
      "Bash(\"C:\\Users\\Pichau\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    cur = conn.cursor()\n    cur.execute(''SELECT version()'')\n    version = cur.fetchone()[0]\n    print(f''PostgreSQL Version: {version}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro: {e}'')\n\")",
      "Bash(\"C:\\Users\\Pichau\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    # Read and execute the PostgreSQL 9.6 compatible script\n    with open(''bd_sistema_aps/Scripts/Hiperdia/Diabetes/CREATE_TB_HIPERDIA_DM_INSULINA_PG9.sql'', ''r'', encoding=''utf-8'') as f:\n        sql_script = f.read()\n    \n    cur = conn.cursor()\n    \n    # Execute the complete script\n    cur.execute(sql_script)\n    conn.commit()\n    \n    print(''Tabela tb_hiperdia_dm_insulina criada com sucesso!'')\n    \n    # Verify the table was created and test a query\n    cur.execute(''SELECT COUNT(*) FROM sistemaaps.tb_hiperdia_dm_insulina'')\n    count = cur.fetchone()[0]\n    print(f''Total de registros de insulina: {count}'')\n    \n    # Show some examples if there are records\n    if count > 0:\n        cur.execute(''SELECT cod_seq_insulina, codcidadao, tipo_insulina, frequencia_dia, doses_estruturadas FROM sistemaaps.tb_hiperdia_dm_insulina LIMIT 3'')\n        rows = cur.fetchall()\n        print(''\\nExemplos de insulinas cadastradas:'')\n        for row in rows:\n            print(f''ID: {row[0]}, Paciente: {row[1]}, Tipo: {row[2]}, Freq: {row[3]}x/dia, Doses: {row[4]}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro ao criar tabela de insulina: {e}'')\n\")",
      "Bash(\"C:\\Users\\Pichau\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    # Read and execute the simple PostgreSQL 9.6 compatible script\n    with open(''bd_sistema_aps/Scripts/Hiperdia/Diabetes/CREATE_TB_HIPERDIA_DM_INSULINA_SIMPLE.sql'', ''r'', encoding=''utf-8'') as f:\n        sql_script = f.read()\n    \n    cur = conn.cursor()\n    \n    # Execute the complete script\n    cur.execute(sql_script)\n    conn.commit()\n    \n    print(''Tabela tb_hiperdia_dm_insulina criada com sucesso!'')\n    \n    # Verify the table was created and test a query\n    cur.execute(''SELECT COUNT(*) FROM sistemaaps.tb_hiperdia_dm_insulina'')\n    count = cur.fetchone()[0]\n    print(f''Total de registros de insulina: {count}'')\n    \n    # Show some examples if there are records\n    if count > 0:\n        cur.execute(''SELECT cod_seq_insulina, codcidadao, tipo_insulina, frequencia_dia, doses_estruturadas FROM sistemaaps.tb_hiperdia_dm_insulina LIMIT 3'')\n        rows = cur.fetchall()\n        print(''\\nExemplos de insulinas cadastradas:'')\n        for row in rows:\n            print(f''ID: {row[0]}, Paciente: {row[1]}, Tipo: {row[2]}, Freq: {row[3]}x/dia, Doses: {row[4]}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro ao criar tabela de insulina: {e}'')\n\")",
      "Bash(\"C:\\Users\\Pichau\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    cur = conn.cursor()\n    \n    # Create the table without foreign key constraint\n    create_table_sql = ''''''\n    CREATE TABLE IF NOT EXISTS sistemaaps.tb_hiperdia_dm_insulina (\n        cod_seq_insulina SERIAL PRIMARY KEY,\n        codcidadao INTEGER NOT NULL,\n        tipo_insulina VARCHAR(50) NOT NULL CHECK (tipo_insulina IN (''''Insulina NPH'''', ''''Insulina Regular'''', ''''Insulina Glargina'''', ''''Insulina Lispro'''')),\n        frequencia_dia INTEGER NOT NULL CHECK (frequencia_dia BETWEEN 1 AND 4),\n        doses_estruturadas TEXT NOT NULL,\n        data_inicio DATE DEFAULT CURRENT_DATE,\n        data_fim DATE NULL,\n        observacoes TEXT,\n        motivo_interrupcao TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    );\n    ''''''\n    \n    cur.execute(create_table_sql)\n    \n    # Create trigger function\n    trigger_function_sql = ''''''\n    CREATE OR REPLACE FUNCTION update_insulina_timestamp()\n    RETURNS TRIGGER AS $$__NEW_LINE__\n    BEGIN\n        NEW.updated_at = CURRENT_TIMESTAMP;\n        RETURN NEW;\n    END;\n    $$LANGUAGE plpgsql;\n    ''''''\n    \n    cur.execute(trigger_function_sql)\n    \n    # Create trigger\n    trigger_sql = ''''''\n    DROP TRIGGER IF EXISTS tr_update_insulina_timestamp ON sistemaaps.tb_hiperdia_dm_insulina;\n    CREATE TRIGGER tr_update_insulina_timestamp\n        BEFORE UPDATE ON sistemaaps.tb_hiperdia_dm_insulina\n        FOR EACH ROW\n        EXECUTE PROCEDURE update_insulina_timestamp();\n    ''''''\n    \n    cur.execute(trigger_sql)\n    \n    # Create indexes\n    indexes_sql = ''''''\n    CREATE INDEX IF NOT EXISTS idx_dm_insulina_cidadao ON sistemaaps.tb_hiperdia_dm_insulina(codcidadao);\n    CREATE INDEX IF NOT EXISTS idx_dm_insulina_ativa ON sistemaaps.tb_hiperdia_dm_insulina(codcidadao, data_fim) WHERE data_fim IS NULL;\n    CREATE INDEX IF NOT EXISTS idx_dm_insulina_tipo ON sistemaaps.tb_hiperdia_dm_insulina(tipo_insulina);\n    CREATE INDEX IF NOT EXISTS idx_dm_insulina_frequencia ON sistemaaps.tb_hiperdia_dm_insulina(frequencia_dia);\n    ''''''\n    \n    cur.execute(indexes_sql)\n    \n    # Add sample data (need to use real patient codes)\n    sample_data_sql = ''''''\n    INSERT INTO sistemaaps.tb_hiperdia_dm_insulina (\n        codcidadao, \n        tipo_insulina, \n        frequencia_dia, \n        doses_estruturadas, \n        observacoes\n    ) VALUES \n    (\n        12499, \n        ''''Insulina NPH'''', \n        2, \n        ''''[{\"dose\": 12, \"horario\": \"08:00\"}, {\"dose\": 8, \"horario\": \"20:00\"}]'''',\n        ''''Exemplo: NPH 2x ao dia - manhã e noite''''\n    )\n    ON CONFLICT DO NOTHING;\n    ''''''\n    \n    cur.execute(sample_data_sql)\n    \n    conn.commit()\n    \n    print(''Tabela tb_hiperdia_dm_insulina criada com sucesso!'')\n    \n    # Verify the table was created and test a query\n    cur.execute(''SELECT COUNT(*) FROM sistemaaps.tb_hiperdia_dm_insulina'')\n    count = cur.fetchone()[0]\n    print(f''Total de registros de insulina: {count}'')\n    \n    # Show table structure\n    cur.execute(''''''\n        SELECT column_name, data_type, is_nullable \n        FROM information_schema.columns \n        WHERE table_name = ''''tb_hiperdia_dm_insulina''''\n        AND table_schema = ''''sistemaaps''''\n        ORDER BY ordinal_position\n    '''''')\n    \n    columns = cur.fetchall()\n    print(''\\nEstrutura da tabela tb_hiperdia_dm_insulina:'')\n    for col in columns:\n        print(f''  {col[0]} - {col[1]} (nullable: {col[2]})'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro ao criar tabela de insulina: {e}'')\n\")",
      "Bash(\"C:\\Users\\Pichau\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    cur = conn.cursor()\n    \n    # Create the table without foreign key constraint\n    create_table_sql = ''''''\n    CREATE TABLE IF NOT EXISTS sistemaaps.tb_hiperdia_dm_insulina (\n        cod_seq_insulina SERIAL PRIMARY KEY,\n        codcidadao INTEGER NOT NULL,\n        tipo_insulina VARCHAR(50) NOT NULL CHECK (tipo_insulina IN (''Insulina NPH'', ''Insulina Regular'', ''Insulina Glargina'', ''Insulina Lispro'')),\n        frequencia_dia INTEGER NOT NULL CHECK (frequencia_dia BETWEEN 1 AND 4),\n        doses_estruturadas TEXT NOT NULL,\n        data_inicio DATE DEFAULT CURRENT_DATE,\n        data_fim DATE NULL,\n        observacoes TEXT,\n        motivo_interrupcao TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    );\n    ''''''\n    \n    cur.execute(create_table_sql)\n    \n    # Create trigger function\n    cur.execute(''''''\n    CREATE OR REPLACE FUNCTION update_insulina_timestamp()\n    RETURNS TRIGGER AS $$__NEW_LINE__\n    BEGIN\n        NEW.updated_at = CURRENT_TIMESTAMP;\n        RETURN NEW;\n    END;\n    $$LANGUAGE plpgsql;\n    '''''')\n    \n    # Create trigger\n    cur.execute(''''''\n    DROP TRIGGER IF EXISTS tr_update_insulina_timestamp ON sistemaaps.tb_hiperdia_dm_insulina;\n    CREATE TRIGGER tr_update_insulina_timestamp\n        BEFORE UPDATE ON sistemaaps.tb_hiperdia_dm_insulina\n        FOR EACH ROW\n        EXECUTE PROCEDURE update_insulina_timestamp();\n    '''''')\n    \n    # Create indexes\n    cur.execute(''CREATE INDEX IF NOT EXISTS idx_dm_insulina_cidadao ON sistemaaps.tb_hiperdia_dm_insulina(codcidadao);'')\n    cur.execute(''CREATE INDEX IF NOT EXISTS idx_dm_insulina_ativa ON sistemaaps.tb_hiperdia_dm_insulina(codcidadao, data_fim) WHERE data_fim IS NULL;'')\n    cur.execute(''CREATE INDEX IF NOT EXISTS idx_dm_insulina_tipo ON sistemaaps.tb_hiperdia_dm_insulina(tipo_insulina);'')\n    cur.execute(''CREATE INDEX IF NOT EXISTS idx_dm_insulina_frequencia ON sistemaaps.tb_hiperdia_dm_insulina(frequencia_dia);'')\n    \n    conn.commit()\n    \n    print(''Tabela tb_hiperdia_dm_insulina criada com sucesso!'')\n    \n    # Verify the table was created\n    cur.execute(''SELECT COUNT(*) FROM sistemaaps.tb_hiperdia_dm_insulina'')\n    count = cur.fetchone()[0]\n    print(f''Total de registros de insulina: {count}'')\n    \n    # Show table structure\n    cur.execute(''''''\n        SELECT column_name, data_type, is_nullable \n        FROM information_schema.columns \n        WHERE table_name = ''tb_hiperdia_dm_insulina''\n        AND table_schema = ''sistemaaps''\n        ORDER BY ordinal_position\n    '''''')\n    \n    columns = cur.fetchall()\n    print(''\\nEstrutura da tabela tb_hiperdia_dm_insulina:'')\n    for col in columns:\n        print(f''  {col[0]} - {col[1]} (nullable: {col[2]})'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro ao criar tabela de insulina: {e}'')\n\")",
      "Bash(\"C:\\Users\\Pichau\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    cur = conn.cursor()\n    \n    # First, check if table already exists\n    cur.execute(\"\"\"\"\"\"\n    SELECT EXISTS (\n        SELECT 1 \n        FROM information_schema.tables \n        WHERE table_schema = ''sistemaaps'' \n        AND table_name = ''tb_hiperdia_dm_insulina''\n    )\n    \"\"\"\"\"\")\n    \n    table_exists = cur.fetchone()[0]\n    \n    if table_exists:\n        print(''Tabela tb_hiperdia_dm_insulina já existe!'')\n        # Show current records\n        cur.execute(''SELECT COUNT(*) FROM sistemaaps.tb_hiperdia_dm_insulina'')\n        count = cur.fetchone()[0]\n        print(f''Total de registros de insulina: {count}'')\n    else:\n        print(''Tabela não existe, criando...'')\n        \n        # Create the table step by step\n        cur.execute(\"\"\"\"\"\"\n        CREATE TABLE sistemaaps.tb_hiperdia_dm_insulina (\n            cod_seq_insulina SERIAL PRIMARY KEY,\n            codcidadao INTEGER NOT NULL,\n            tipo_insulina VARCHAR(50) NOT NULL,\n            frequencia_dia INTEGER NOT NULL CHECK (frequencia_dia BETWEEN 1 AND 4),\n            doses_estruturadas TEXT NOT NULL,\n            data_inicio DATE DEFAULT CURRENT_DATE,\n            data_fim DATE NULL,\n            observacoes TEXT,\n            motivo_interrupcao TEXT,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        );\n        \"\"\"\"\"\")\n        \n        # Add constraint separately\n        cur.execute(\"\"\"\"\"\"\n        ALTER TABLE sistemaaps.tb_hiperdia_dm_insulina \n        ADD CONSTRAINT check_tipo_insulina \n        CHECK (tipo_insulina IN (''Insulina NPH'', ''Insulina Regular'', ''Insulina Glargina'', ''Insulina Lispro''));\n        \"\"\"\"\"\")\n        \n        # Create indexes\n        cur.execute(''CREATE INDEX idx_dm_insulina_cidadao ON sistemaaps.tb_hiperdia_dm_insulina(codcidadao);'')\n        cur.execute(''CREATE INDEX idx_dm_insulina_ativa ON sistemaaps.tb_hiperdia_dm_insulina(codcidadao, data_fim) WHERE data_fim IS NULL;'')\n        \n        conn.commit()\n        print(''Tabela criada com sucesso!'')\n    \n    # Show table structure\n    cur.execute(\"\"\"\"\"\"\n        SELECT column_name, data_type, is_nullable \n        FROM information_schema.columns \n        WHERE table_name = ''tb_hiperdia_dm_insulina''\n        AND table_schema = ''sistemaaps''\n        ORDER BY ordinal_position\n    \"\"\"\"\"\")\n    \n    columns = cur.fetchall()\n    print(''\\nEstrutura da tabela tb_hiperdia_dm_insulina:'')\n    for col in columns:\n        print(f''  {col[0]} - {col[1]} (nullable: {col[2]})'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro: {e}'')\n\")",
      "Bash(\"C:\\Users\\Pichau\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" app.py)",
      "Bash(\"C:\\Users\\Pichau\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    cur = conn.cursor()\n    \n    # Check if the required columns exist for insulin modification\n    cur.execute(''''''\n        SELECT column_name, data_type, is_nullable \n        FROM information_schema.columns \n        WHERE table_name = ''tb_hiperdia_dm_insulina''\n        AND table_schema = ''sistemaaps''\n        AND column_name IN (''status'', ''cod_insulina_anterior'', ''motivo_modificacao'', ''motivo_interrupcao'')\n        ORDER BY column_name\n    '''''')\n    \n    columns = cur.fetchall()\n    print(''Required columns for insulin modification:'')\n    for col in columns:\n        print(f''  {col[0]} - {col[1]} (nullable: {col[2]})'')\n    \n    # Also check if we have any test data\n    cur.execute(''SELECT COUNT(*) FROM sistemaaps.tb_hiperdia_dm_insulina WHERE data_fim IS NULL'')\n    active_count = cur.fetchone()[0]\n    print(f''\\nActive insulin records: {active_count}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n\")",
      "Bash(\"C:\\Users\\Pichau\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    cur = conn.cursor()\n    \n    # Add missing columns for insulin modification tracking\n    alter_queries = [\n        ''''''ALTER TABLE sistemaaps.tb_hiperdia_dm_insulina \n           ADD COLUMN IF NOT EXISTS status VARCHAR(20) DEFAULT ''ATIVO'' \n           CHECK (status IN (''ATIVO'', ''SUBSTITUIDO'', ''INTERROMPIDO''))'''''',\n        \n        ''''''ALTER TABLE sistemaaps.tb_hiperdia_dm_insulina \n           ADD COLUMN IF NOT EXISTS cod_insulina_anterior INTEGER'''''',\n        \n        ''''''ALTER TABLE sistemaaps.tb_hiperdia_dm_insulina \n           ADD COLUMN IF NOT EXISTS motivo_modificacao TEXT''''''\n    ]\n    \n    for query in alter_queries:\n        print(f''Executing: {query}'')\n        cur.execute(query)\n    \n    # Update existing records to have ATIVO status\n    cur.execute(''UPDATE sistemaaps.tb_hiperdia_dm_insulina SET status = \\''ATIVO\\'' WHERE status IS NULL'')\n    \n    conn.commit()\n    print(''Successfully added missing columns and updated existing records!'')\n    \n    # Verify the changes\n    cur.execute(''''''\n        SELECT column_name, data_type, column_default \n        FROM information_schema.columns \n        WHERE table_name = ''tb_hiperdia_dm_insulina''\n        AND table_schema = ''sistemaaps''\n        AND column_name IN (''status'', ''cod_insulina_anterior'', ''motivo_modificacao'')\n        ORDER BY column_name\n    '''''')\n    \n    columns = cur.fetchall()\n    print(''\\nNew columns added:'')\n    for col in columns:\n        print(f''  {col[0]} - {col[1]} (default: {col[2]})'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n\")",
      "Bash(\"C:\\Users\\Pichau\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport psycopg2\nimport json\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    cur = conn.cursor()\n    \n    # Check current insulin records\n    cur.execute(''''''\n        SELECT cod_seq_insulina, codcidadao, tipo_insulina, frequencia_dia, \n               doses_estruturadas, status, data_fim IS NULL as ativo\n        FROM sistemaaps.tb_hiperdia_dm_insulina \n        ORDER BY cod_seq_insulina \n        LIMIT 5\n    '''''')\n    \n    insulins = cur.fetchall()\n    print(''Current insulin records:'')\n    for insulin in insulins:\n        cod_seq, codcidadao, tipo, freq, doses, status, ativo = insulin\n        print(f''  ID: {cod_seq}, Patient: {codcidadao}, Type: {tipo}, Freq: {freq}x/day, Status: {status}, Active: {ativo}'')\n        if doses:\n            try:\n                doses_parsed = json.loads(doses)\n                print(f''    Doses: {doses_parsed}'')\n            except:\n                print(f''    Doses (raw): {doses}'')\n    \n    # Test the new API endpoint by getting details of first active insulin\n    cur.execute(''SELECT cod_seq_insulina FROM sistemaaps.tb_hiperdia_dm_insulina WHERE data_fim IS NULL LIMIT 1'')\n    result = cur.fetchone()\n    \n    if result:\n        test_insulin_id = result[0]\n        print(f''\\nTesting API with insulin ID: {test_insulin_id}'')\n        \n        # This would normally be done via HTTP request, but we can test the query directly\n        cur.execute(''''''\n            SELECT cod_seq_insulina, codcidadao, tipo_insulina, frequencia_dia, \n                   doses_estruturadas, data_inicio, data_fim, observacoes,\n                   status, motivo_interrupcao, created_at, updated_at\n            FROM sistemaaps.tb_hiperdia_dm_insulina \n            WHERE cod_seq_insulina = %s AND data_fim IS NULL\n        '''''', (test_insulin_id,))\n        \n        details = cur.fetchone()\n        if details:\n            print(''API query would return:'')\n            print(f''  Success: True'')\n            print(f''  Insulin details: {details}'')\n        else:\n            print(''No active insulin found for testing'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n\")"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}