{
  "permissions": {
    "allow": [
      "Bash(node:*)",
      "Bash(timeout:*)",
      "Bash(git fetch:*)",
      "Bash(git pull:*)",
      "Bash(taskkill:*)",
      "Bash(python:*)",
      "Bash(py app.py)",
      "Bash(mv:*)",
      "WebFetch(domain:localhost)",
      "Bash(pip install:*)",
      "Bash(mkdir:*)",
      "Bash(py:*)",
      "Bash(del test_pdf.py)",
      "Bash(rm:*)",
      "Bash(copy \"PRESCRIÇÃO - HIPERTENSÃO - MODELO.docx\" \"template_receituario.docx\")",
      "Bash(cp:*)",
      "Bash(psql:*)",
      "Bash(curl:*)",
      "Bash(del check_table.py)",
      "Bash(where python)",
      "Bash(envScriptsactivate)",
      "Bash(envScriptspython.exe app.py)",
      "Bash(\"env/Scripts/python.exe\" app.py)",
      "Bash(C:UsersPichauDesktopSISTEMA APSsistemaAPSenvScriptspython.exe app.py)",
      "Bash(C:UsersPichauDesktopSISTEMA APSsistemaAPSenvScriptspython.exe -c \"\nimport psycopg2\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    cur = conn.cursor()\n    \n    # Verificar se há medicamentos na tabela\n    cur.execute(''SELECT COUNT(*) FROM sistemaaps.tb_hiperdia_has_medicamentos WHERE data_fim IS NULL OR data_fim > CURRENT_DATE'')\n    count = cur.fetchone()[0]\n    print(f''Total de medicamentos ativos: {count}'')\n    \n    # Mostrar alguns exemplos se houver dados\n    if count > 0:\n        cur.execute(''''''\n            SELECT codcidadao, nome_medicamento, dose, frequencia, data_inicio, data_fim \n            FROM sistemaaps.tb_hiperdia_has_medicamentos \n            WHERE data_fim IS NULL OR data_fim > CURRENT_DATE\n            LIMIT 5\n        '''''')\n        rows = cur.fetchall()\n        print(''\\nExemplos de medicamentos ativos:'')\n        for row in rows:\n            print(f''Paciente: {row[0]}, Medicamento: {row[1]}, Dose: {row[2]}, Frequência: {row[3]}, Início: {row[4]}, Fim: {row[5]}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro: {e}'')\n\")",
      "Bash(.envScriptspython.exe app.py)",
      "Bash(npx eslint:*)",
      "Bash(where psql)",
      "Bash(sed:*)",
      "Bash(C:UsersPichauDesktopSISTEMA APSsistemaAPSenvScriptspython.exe -c \"\nimport psycopg2\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    cur = conn.cursor()\n    \n    # Verificar estrutura da tabela de acompanhamento\n    cur.execute(''''''\n        SELECT column_name, data_type, is_nullable, column_default\n        FROM information_schema.columns \n        WHERE table_name = ''tb_hiperdia_has_acompanhamento''\n        AND table_schema = ''sistemaaps''\n        ORDER BY ordinal_position\n    '''''')\n    \n    columns = cur.fetchall()\n    print(''Estrutura atual da tabela tb_hiperdia_has_acompanhamento:'')\n    print(''Column Name | Data Type | Nullable | Default'')\n    print(''-'' * 60)\n    for col in columns:\n        print(f''{col[0]} | {col[1]} | {col[2]} | {col[3]}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro: {e}'')\n\")",
      "Bash(\"C:\\Users\\Pichau\\Desktop\\SISTEMA APS\\sistemaAPS\\env\\Scripts\\python.exe\" -c \"\nimport psycopg2\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    cur = conn.cursor()\n    \n    # Verificar estrutura da tabela de acompanhamento\n    cur.execute(''''''\n        SELECT column_name, data_type, is_nullable, column_default\n        FROM information_schema.columns \n        WHERE table_name = ''tb_hiperdia_has_acompanhamento''\n        AND table_schema = ''sistemaaps''\n        ORDER BY ordinal_position\n    '''''')\n    \n    columns = cur.fetchall()\n    print(''Estrutura atual da tabela tb_hiperdia_has_acompanhamento:'')\n    print(''Column Name | Data Type | Nullable | Default'')\n    print(''-'' * 60)\n    for col in columns:\n        print(f''{col[0]} | {col[1]} | {col[2]} | {col[3]}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro: {e}'')\n\")",
      "Bash(find . -name \"*.sql\" -exec grep -l \"mv_hiperdia\" {} ;)",
      "Bash(\"C:\\Users\\Pichau\\Desktop\\SISTEMA APS\\sistemaAPS\\env\\Scripts\\python.exe\" -c \"\nimport psycopg2\n\ntry:\n    conn = psycopg2.connect(\n        host=''localhost'',\n        database=''esus'',\n        user=''postgres'',\n        password=''EUC[x*x~Mc#S+H_Ui#xZBr0O~'',\n        port=''5433''\n    )\n    \n    # Ler o script SQL para criar a view de diabetes\n    with open(''bd_sistema_aps/Scripts/Hiperdia/Diabetes/CREATE VIEW HIPERDIA - DIABETES.sql'', ''r'', encoding=''utf-8'') as f:\n        sql_script = f.read()\n    \n    cur = conn.cursor()\n    \n    # Executar o script completo\n    cur.execute(sql_script)\n    conn.commit()\n    \n    print(''View mv_hiperdia_diabetes criada com sucesso!'')\n    \n    # Verificar se a view foi criada e testar uma consulta\n    cur.execute(''SELECT COUNT(*) FROM sistemaaps.mv_hiperdia_diabetes'')\n    count = cur.fetchone()[0]\n    print(f''Total de pacientes diabeticos encontrados: {count}'')\n    \n    # Mostrar alguns exemplos\n    if count > 0:\n        cur.execute(''SELECT cod_paciente, nome_paciente, tipo_diabetes, nome_equipe FROM sistemaaps.mv_hiperdia_diabetes LIMIT 5'')\n        rows = cur.fetchall()\n        print(''\\nExemplos de pacientes diabeticos:'')\n        for row in rows:\n            print(f''ID: {row[0]}, Nome: {row[1]}, Tipo: {row[2]}, Equipe: {row[3]}'')\n    \n    cur.close()\n    conn.close()\n    \nexcept Exception as e:\n    print(f''Erro ao criar view: {e}'')\n\")",
      "Bash(\"env\\Scripts\\python.exe\":*)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}